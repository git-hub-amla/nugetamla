name: Validate Znode10 Package Versions

on:
  pull_request:
    branches:
      - qa
      - main  # Changed from master to main
      - dev

jobs:
  validate_packages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: Find csproj files in the pull request
        id: find_csproj_files
        run: |
          # Fetch all branches to ensure we can compare
          git fetch --all
          # Find all csproj files modified in the PR
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}..origin/${{ github.head_ref }} | grep '\.csproj$' > csproj_files.txt

      - name: Check for csproj files
        id: check_csproj_files
        run: |
          if [ ! -s csproj_files.txt ]; then
            echo "No csproj files found. Skipping validation."
            echo "skip_validation=true" >> $GITHUB_ENV
          else
            echo "csproj files found. Proceeding with validation."
            echo "skip_validation=false" >> $GITHUB_ENV
          fi

      - name: Validate Znode10 package versions
        if: env.skip_validation != 'true'
        run: |
          # Loop through each csproj file and validate package versions
          while IFS= read -r csproj_file; do
            echo "Validating $csproj_file..."
            if grep -q '<PackageReference Include="Znode10' "$csproj_file"; then
              # Extract package references with Znode10
              grep '<PackageReference Include="Znode10' "$csproj_file" | while IFS= read -r package_line; do
                # Extract the version part from the package reference
                version=$(echo "$package_line" | sed -n 's/.*Version="\([^"]*\)".*/\1/p')
                
                # Display the package reference being validated
                echo "Checking package: $package_line"

                case "${{ github.event.pull_request.base.ref }}" in
                  qa)
                    # For qa branch, check that -qa is present
                    if [[ ! "$version" =~ -qa ]]; then
                      echo "Invalid package version in $csproj_file: $package_line. Expected version to include '-qa'."
                      exit 1
                    fi
                    ;;
                  main)
                    # For main branch, check that -dev or -qa are not present
                    if [[ "$version" =~ -dev || "$version" =~ -qa ]]; then
                      echo "Invalid package version in $csproj_file: $package_line. '-dev' or '-qa' should not be present."
                      exit 1
                    fi
                    ;;
                  dev)
                    # For dev branch, check that -dev is present
                    if [[ ! "$version" =~ -dev ]]; then
                      echo "Invalid package version in $csproj_file: $package_line. Expected version to include '-dev'."
                      exit 1
                    fi
                    ;;
                  *)
                    echo "Unsupported branch: ${{ github.event.pull_request.base.ref }}"
                    exit 1
                    ;;
                esac
              done
            fi
          done < csproj_files.txt
        shell: bash

      - name: Fail if validation fails
        if: failure()
        run: |
          echo "Package version validation failed. Ensure the correct version tags are applied."
          exit 1
